In this chapter, we will discuss in detail about file permission and access modes in linux:-

File ownership is an important component of Unix that provides a secure method for storing files.
Every file in Unix has the following attributes −
Owner permissions − The owner's permissions determine what actions the owner of the file can perform on the file.
Group permissions − The group's permissions determine what actions a user, who is a member of the group that a file belongs to, can perform on the file. 
Other (world) permissions − The permissions for others indicate what action all other users can perform on the file.

Linux permissions dictate 3 things you may do with a file, read, write and execute. They are referred to in Linux by a single letter each.

r read - you may view the contents of the file.
w write - you may change the contents of the file.
x execute - you may execute the contents of the file.
To change permissions on a file or directory we use a command called chmod It stands for change file mode bits which is a bit of a mouthfull but think of the mode bits as the permission
inay execute or run the file if it is a program or script.
dicators.

Every file and directory in Linux system has following 3 permissions defined for all the 3 owners .

Read: This permission give you the authority to open and read a file. Read permission on a directory gives you the ability to lists its content.
Write: The write permission gives you the authority to modify the contents of a file. The write permission on a directory gives you the authority to add, remove and rename files stored in the directory. Consider a scenario where you have to write permission on file but do not have write permission on the directory where the file is stored. You will be able to modify the file contents. But you will not be able to rename, move or remove the file from the directory.
Execute: In Windows, an executable program usually has an extension ".exe" and which you can easily run. In Unix/Linux, you cannot run a program unless the execute permission is 
set. If the execute permission is not set, you might still be able to see/modify the program code(provided read & write permissions are set), but not run it.

The permissions of a file are the first line of defense in the security of a Unix system. The basic building blocks of Unix permissions are the read, write, and execute permissions, which have been described below −Read 
 Grants the capability to read, i.e., view the contents of the file.Write
 Grants the capability to modify, or remove the content of the file.Execute
  User with execute permissions can run a file as a program.Directory Access Modes
r = read permission
w = write permission
x = execute permission
- = no permission
Changing Ownership
The chown command changes the ownership of a file. The basic syntax is as follows −
 $ chown user filelist 
 The value of the user can be either the name of a user on the system or the user id (uid) of a user on the system. 
The following example will help you understand the concept −
 $ chown amrood testfile$ Changes the owner of the given file to the user amrood. 
 NOTE − The super user, root, has the unrestricted capability to change the ownership of any file but normal users can change the ownership of only those files that they own.Changing Group Ownership 
 The chgrp command changes the group ownership of a file. The basic syntax is as follows:-
 − $ chgrp group filelist
  The value of group can be the name of a group on the system or the group ID (GID) of a group on the system. 
  Following example helps you understand the concept − 
   $ chgrp special testfile
   $
  
